{"version":3,"file":"static/js/770.1b0a1ae3.chunk.js","mappings":"mPAEaA,EAAaC,EAAAA,GAAAA,GAAH,oKAQVC,EAAaD,EAAAA,GAAAA,GAAH,mJAQVE,EAAMF,EAAAA,GAAAA,IAAH,gF,SC0BhB,EAtCa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,mBAAuBH,EAASD,EACjC,GAAE,CAACC,KAGF,+BACE,SAACP,EAAD,UACGK,EAAKM,OAAS,GACb,6DAEAN,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAApB,OACP,UAACb,EAAD,YACIa,IACA,SAACZ,EAAD,CACEa,IAAK,mCACLC,IAAG,qBAGNF,IACC,SAACZ,EAAD,CACEa,IAAG,yCAAoCD,GACvCE,IAAG,UAAKH,MAGZ,mCAAWA,MACX,uCAAeD,OChBhB,WAGX,IAH0B,IAAdK,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,CDd4BQ,GADV,OAsBlB,C,8DExCKC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAa,mCAAG,WAAMC,GAAN,gGAEKF,EAAAA,EAAAA,IAAA,qCACSD,IAHd,cAEZI,EAFY,yBAKXD,EAAkBC,EAASC,KAAKC,UALrB,gCAOlBC,QAAQC,IAAR,MAPkB,yDAAH,sDAWbC,EAAc,mCAAG,WAAO9B,EAAS+B,GAAhB,gGAEIT,EAAAA,EAAAA,IAAA,gBACZtB,EADY,oBACOqB,EADP,oBAFJ,cAEbI,EAFa,yBAKZM,EAASN,EAASC,OALN,gCAOnBE,QAAQC,IAAR,MAPmB,yDAAH,wDAWdG,EAAkB,mCAAG,WAAOhC,EAASD,GAAhB,gGAEAuB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeqB,EADf,oBAFA,cAEjBI,EAFiB,yBAKhB1B,EAAQ0B,EAASC,KAAK5B,OALN,gCAOvB8B,QAAQK,MAAR,MAPuB,yDAAH,wDAWlBC,EAAqB,mCAAG,WAAOlC,EAASmC,GAAhB,gGAEHb,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeqB,EADf,oBAFG,cAEpBI,EAFoB,yBAKnBU,EAAWV,EAASC,KAAKC,UALN,gCAO1BC,QAAQK,MAAR,MAP0B,yDAAH,wDAWrBG,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,gGAEChB,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBgB,EADpB,gCAFD,cAEhBZ,EAFgB,yBAKfa,EAAiBb,EAASC,KAAKC,UALhB,gCAOtBC,QAAQK,MAAR,MAPsB,yDAAH,wDAWjB9B,EAAM,CACVoB,cAAAA,EACAO,eAAAA,EACAE,mBAAAA,EACAE,sBAAAA,EACAE,kBAAAA,GAGF,K","sources":["components/Cast.styled.js","components/Cast.jsx","../node_modules/nanoid/index.browser.js","services/movieApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  gap: 10px;\n  padding: 0px;\n  list-style-type: none;\n`;\n\nexport const StyledItem = styled.li`\n  border: 1px solid black;\n  border-radius: 12px;\n  text-align: center;\n  background-color: #fff;\n  overflow: hidden;\n`;\n\nexport const Img = styled.img`\n  display: block;\n  max-width: 300px;\n  width: 100%;\n`;\n\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../services/movieApi';\nimport { nanoid } from 'nanoid';\nimport { StyledList, StyledItem, Img } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    api.fetchMovieCastById(movieId, setCast);\n  }, [movieId]);\n\n  return (\n    <>\n      <StyledList>\n        {cast.length < 1 ? (\n          <p>Sorry, the cast is not available!</p>\n        ) : (\n          cast.map(({ character, name, profile_path }) => (\n            <StyledItem key={nanoid()}>\n              {!profile_path && (\n                <Img\n                  src={'https://placehold.jp/200x300.png'}\n                  alt={`just placeholder`}\n                />\n              )}\n              {profile_path && (\n                <Img\n                  src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                  alt={`${name}`}\n                />\n              )}\n              <h4>Name: {name}</h4>\n              <p>Character: {character}</p>\n            </StyledItem>\n          ))\n        )}\n      </StyledList>\n    </>\n  );\n};\n\nexport default Cast;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import axios from 'axios';\n\nconst API_KEY = 'e31c232cf532b70b960b6c4d5d67c018';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrending = async setTrendingMovies => {\n  try {\n    const response = await axios.get(\n      `trending/movie/day?api_key=${API_KEY}`\n    );\n    return setTrendingMovies(response.data.results);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchMovieCastById = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieReviewsById = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieByQuery = async (query, setSearchedMovie) => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    return setSearchedMovie(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst api = {\n  fetchTrending,\n  fetchMovieById,\n  fetchMovieCastById,\n  fetchMovieReviewsById,\n  fetchMovieByQuery,\n};\n\nexport default api;\n"],"names":["StyledList","styled","StyledItem","Img","useState","cast","setCast","movieId","useParams","useEffect","api","length","map","character","name","profile_path","src","alt","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","API_KEY","axios","fetchTrending","setTrendingMovies","response","data","results","console","log","fetchMovieById","setMovie","fetchMovieCastById","error","fetchMovieReviewsById","setReviews","fetchMovieByQuery","query","setSearchedMovie"],"sourceRoot":""}